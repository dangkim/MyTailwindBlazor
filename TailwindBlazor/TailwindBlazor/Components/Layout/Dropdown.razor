@inject IJSRuntime JS

<div class="relative flex">
    <div class="flex" @onmousedown="async () => await WrapperButtonClick.InvokeAsync(!OpenWrapper)">
        @WrapperButton
    </div>
    <div id="@WrapperId" @ref="navMenuRef" class="@($"{ClassNames} absolute z-10 {GetAnimation()} {(OpenWrapper ? "scale-100" : "scale-0")}")">
        @ChildContent
    </div>
</div>

@code {
   
    [Parameter] public RenderFragment WrapperButton { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string ClassNames { get; set; }
    [Parameter] public string Animation { get; set; }
    [Parameter] public bool OpenWrapper { get; set; }
    [Parameter] public string WrapperId { get; set; }

    [Parameter]
    public EventCallback<bool> WrapperButtonClick { get; set; }

    private string GetAnimation() => Animation ?? "origin-top-right transition-all duration-300 ease-in-out";

    private ElementReference navMenuRef;
    IJSObjectReference? jsModule;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Layout/MainLayout.razor.js");
        //await jsModule.InvokeVoidAsync("addDocumentClickListener", navMenuRef, DotNetObjectReference.Create(this));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Layout/Dropdown.razor.js");
            await jsModule.InvokeVoidAsync("addDocumentClickListener", navMenuRef);
        }
    }

    [JSInvokable]
    public void DocumentClickHandler()
    {
        // Handle the document click event (outside NavMenu)
        // ...
        var a = 0;
    }
}