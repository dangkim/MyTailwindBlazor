@using Syncfusion.Blazor.Grids
@rendermode InteractiveAuto

@* <Card extra="w-full h-full p-3"> *@
<div>
    <button onclick="returnArrayAsync(5)">
        Trigger .NET static method
    </button>
</div>
<div class="row">
    @* <SfGrid DataSource="@Orders" AllowFiltering="true" AllowPaging="true">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
    <GridPageSettings PageCount="5"></GridPageSettings>
    <GridColumns>
    <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer ID" Width="120"></GridColumn>
    <GridColumn Field=@nameof(Order.Freight) TextAlign="TextAlign.Right" Format="C2"></GridColumn>
    <GridColumn Field=@nameof(Order.OrderDate) HeaderText="Ship City"></GridColumn>
    <GridColumn Field=@nameof(Order.ShipCountry) HeaderText="Ship Country" Width="150"></GridColumn>
    </GridColumns>
    </SfGrid> *@
    <SfGrid ID="Grid" DataSource="@Orders" @ref="Grid" AllowPaging="true" AllowFiltering="true"
            AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search"})" Height="315">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents OnToolbarClick="ToolbarClick" TValue="Order"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(Order.OrderID) AllowFiltering="false" HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true })" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="120">
                <FilterTemplate></FilterTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" ValidationRules="@(new ValidationRules{ Required=true })" Width="120"></GridColumn>
            <GridColumn Field=@nameof(Order.OrderDate) AllowFiltering="false" HeaderText=" Order Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="130" Type="Syncfusion.Blazor.Grids.ColumnType.Date">
                <FilterTemplate></FilterTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Order.Freight) AllowFiltering="false" HeaderText="Freight" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditType="EditType.NumericEdit" Width="120">
                <FilterTemplate></FilterTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Order.ShipCountry) AllowFiltering="false" HeaderText="Ship Country" EditType="EditType.DropDownEdit" Width="150">
                <FilterTemplate></FilterTemplate>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>
@* </Card> *@

@code {
    public List<Order>? Orders { get; set; }
    SfGrid<Order>? Grid;
    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 75).Select(x => new Order()
            {
                OrderID = 1000 + x,
                CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                Freight = 2.1 * x,
                OrderDate = DateTime.Now.AddDays(-x),
                ShipCountry = (new string[] { "USA", "UK", "CHINA", "RUSSIA", "INDIA" })[new Random().Next(5)]
            }).ToList();
    }
    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            this.Grid?.ExportToExcelAsync();
        }
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string? CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
        public string? ShipCountry { get; set; }
    }
}
