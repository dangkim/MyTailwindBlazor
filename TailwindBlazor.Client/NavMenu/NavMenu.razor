@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveAuto

<nav class="sticky top-4 z-40 flex flex-row flex-wrap items-center justify-between rounded-xl bg-white/10 p-2 backdrop-blur-xl dark:bg-[#0b14374d]">
    <div class="ml-[6px]">
        <div class="h-6 w-[224px] pt-1">
            <a class="text-sm font-normal text-navy-700 hover:underline dark:text-white dark:hover:text-white"
               href=" ">
                Pages
                <span class="mx-1 text-sm text-navy-700 hover:text-navy-700 dark:text-white">
                    /
                </span>
            </a>
            <NavLink class="text-sm font-normal capitalize text-navy-700 hover:underline dark:text-white dark:hover:text-white"
                     href="#">
                BrandTextHere
            </NavLink>
        </div>
        <p class="shrink text-[33px] capitalize text-navy-700 dark:text-white">
            <NavLink href="#"
                     class="font-bold capitalize hover:text-navy-700 dark:hover:text-white">
                BrandTextHere
            </NavLink>
        </p>
    </div>

    <div class="relative mt-[3px] flex h-[61px] w-[355px] flex-grow items-center justify-around gap-2 rounded-full bg-white px-2 py-2 shadow-xl shadow-shadow-500 dark:!bg-navy-800 dark:shadow-none md:w-[365px] md:flex-grow-0 md:gap-1 xl:w-[365px] xl:gap-2">
        <div class="flex h-full items-center rounded-full bg-lightPrimary text-navy-700 dark:bg-navy-900 dark:text-white xl:w-[225px]">
            <p class="pl-3 pr-2 text-xl">
                <SfIcon Name="IconName.Search" class="h-4 w-4 text-gray-400 dark:text-white" />
            </p>
            <input type="text"
                   placeholder="Search..."
                   class="block h-full w-full rounded-full bg-lightPrimary text-sm font-medium text-navy-700 outline-none placeholder:!text-gray-400 dark:bg-navy-900 dark:text-white dark:placeholder:!text-white sm:w-fit" />
        </div>
        <span class="flex cursor-pointer text-xl text-gray-600 dark:text-white xl:hidden"
              onClick=()>
            <SfIcon Name="IconName.Justify" class="" />
        </span>

        <div @ref="dropdownBellRef">
            <WrapperDropdownBellComponent DropDownWrapperClick="OpenCloseBellWrapper" OpenWrapper="IsOpenedBellWrapper"></WrapperDropdownBellComponent>
        </div>

        <div @ref="dropdownInfoRef">
            <WrapperDropdownInfoComponent DropDownWrapperClick="OpenCloseInfoWrapper" OpenWrapper="IsOpenedInfoWrapper"></WrapperDropdownInfoComponent>
        </div>

        <div class="cursor-pointer text-gray-600" @onclick="ToggleDarkMode">
            @if (DarkMode)
            {
                <i class="fa-regular fa-sun text-gray-600 dark:text-white"></i>
            }
            else
            {
                <i class="fa-solid fa-moon text-gray-600 dark:text-white"></i>
            }
        </div>

        <div @ref="dropdownAvatarRef">
            <WrapperDropdownAvatarComponent DropDownWrapperClick="OpenCloseAvatarWrapper" OpenWrapper="IsOpenedAvatarWrapper"></WrapperDropdownAvatarComponent>
        </div>
    </div>
</nav>

@code {
    private string CurrentPath => NavigationManager.Uri;

    private bool IsOpenedInfoWrapper { get; set; }

    private bool IsOpenedBellWrapper { get; set; }

    private bool IsOpenedAvatarWrapper { get; set; }

    private bool Added { get; set; } = true;

    private bool DarkMode { get; set; }

    private ElementReference dropdownInfoRef;
    private ElementReference dropdownBellRef;
    private ElementReference dropdownAvatarRef;
    IJSObjectReference? jsModule;

    private async Task ToggleDarkMode()
    {
        DarkMode = !DarkMode;

        await JS.InvokeVoidAsync("localStorage.setItem", "darkmode", DarkMode.ToString());
        await jsModule.InvokeVoidAsync("toggleDarkMode", DarkMode);
    }

    [JSInvokable]
    public async Task DocumentClickHandler()
    {
        IsOpenedInfoWrapper = false;

        IsOpenedBellWrapper = false;

        IsOpenedAvatarWrapper = false;

        Added = false;

        StateHasChanged();
    }

    private async Task OpenCloseBellWrapper(bool isOpenedBellWrapper)
    {
        IsOpenedBellWrapper = isOpenedBellWrapper;

        IsOpenedInfoWrapper = false;

        IsOpenedAvatarWrapper = false;

        if (!Added)
        {
            await jsModule.InvokeVoidAsync("addDocumentClickListener", dropdownBellRef, dropdownInfoRef, dropdownAvatarRef, DotNetObjectReference.Create(this));
            Added = !Added;
        }
    }

    private async Task OpenCloseInfoWrapper(bool isOpenedInfoWrapper)
    {
        IsOpenedInfoWrapper = isOpenedInfoWrapper;

        IsOpenedBellWrapper = false;

        IsOpenedAvatarWrapper = false;

        if (!Added)
        {
            await jsModule.InvokeVoidAsync("addDocumentClickListener", dropdownBellRef, dropdownInfoRef, dropdownAvatarRef, DotNetObjectReference.Create(this));
            Added = !Added;
        }
    }

    private async Task OpenCloseAvatarWrapper(bool isOpenedAvatarWrapper)
    {
        IsOpenedAvatarWrapper = isOpenedAvatarWrapper;

        IsOpenedBellWrapper = false;

        IsOpenedInfoWrapper = false;

        if (!Added)
        {
            await jsModule.InvokeVoidAsync("addDocumentClickListener", dropdownBellRef, dropdownInfoRef, dropdownAvatarRef, DotNetObjectReference.Create(this));
            Added = !Added;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./NavMenu/NavMenu.razor.js");
            await jsModule.InvokeVoidAsync("addDocumentClickListener", dropdownBellRef, dropdownInfoRef, dropdownAvatarRef, DotNetObjectReference.Create(this));
        }
    }
}